[
  {
    "objectID": "ST558Proj1.html",
    "href": "ST558Proj1.html",
    "title": "ST558 Project 1",
    "section": "",
    "text": "Data processing first steps\nOne of the goals of this project is to create a function that can take in a URL and process and parse similar types of data sets in a specific way. The data sets we are working with are files that contain Census Bureau information.\n\nImport the Data\nWe will start with the EDU01a data set and use it to outline the steps that will be necessary to create our wrapper function. To begin, the appropriate packages are loaded and the data imported using read_csv. This function is appropriate for csv files. The data already contains column names, which is the default for this function, so it is not necessary to specify an argument regarding column names.\n\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n\nlibrary(tidyverse)\nlibrary(readr)\ncensus_1a_original &lt;- \nread_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(census_1a_original)\n\n# A tibble: 6 × 42\n  Area_name     STCOU EDU010187F EDU010187D EDU010187N1 EDU010187N2 EDU010188F\n  &lt;chr&gt;         &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;            &lt;dbl&gt;\n1 UNITED STATES 00000          0   40024299 0000        0000                 0\n2 ALABAMA       01000          0     733735 0000        0000                 0\n3 Autauga, AL   01001          0       6829 0000        0000                 0\n4 Baldwin, AL   01003          0      16417 0000        0000                 0\n5 Barbour, AL   01005          0       5071 0000        0000                 0\n6 Bibb, AL      01007          0       3557 0000        0000                 0\n# ℹ 35 more variables: EDU010188D &lt;dbl&gt;, EDU010188N1 &lt;chr&gt;, EDU010188N2 &lt;chr&gt;,\n#   EDU010189F &lt;dbl&gt;, EDU010189D &lt;dbl&gt;, EDU010189N1 &lt;chr&gt;, EDU010189N2 &lt;chr&gt;,\n#   EDU010190F &lt;dbl&gt;, EDU010190D &lt;dbl&gt;, EDU010190N1 &lt;chr&gt;, EDU010190N2 &lt;chr&gt;,\n#   EDU010191F &lt;dbl&gt;, EDU010191D &lt;dbl&gt;, EDU010191N1 &lt;chr&gt;, EDU010191N2 &lt;chr&gt;,\n#   EDU010192F &lt;dbl&gt;, EDU010192D &lt;dbl&gt;, EDU010192N1 &lt;chr&gt;, EDU010192N2 &lt;chr&gt;,\n#   EDU010193F &lt;dbl&gt;, EDU010193D &lt;dbl&gt;, EDU010193N1 &lt;chr&gt;, EDU010193N2 &lt;chr&gt;,\n#   EDU010194F &lt;dbl&gt;, EDU010194D &lt;dbl&gt;, EDU010194N1 &lt;chr&gt;, EDU010194N2 &lt;chr&gt;, …\n\n\n\n\nSteps 1 and 2: Select Columns and Pivot to Long Form, remove duplicate District of Columbia\nThe next step is to select the columns we are interested in, followed by pivoting the data into a long format, which is more appropriate for data analysis. In this case, we are selecting Area_name, which is also being renamed to area_name, STCOU, which is a state (first 2 digits) and county (last 3 digits) code and all columns that end with a “D”. These columns ending in “D” correspond to an id that identifies the type of survey and value associated with it and the 2 digit year.\n\ncensus_1a_condensed &lt;- census_1a_original |&gt;\n  select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n  rename(area_name = Area_name) |&gt;\n  pivot_longer(cols = 3:12, \n               names_to = \"item_id\", \n               values_to = \"enrollment\") |&gt; \n  filter(area_name != \"District of Columbia\")\nhead(census_1a_condensed) \n\n# A tibble: 6 × 4\n  area_name     STCOU item_id    enrollment\n  &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt;\n1 UNITED STATES 00000 EDU010187D   40024299\n2 UNITED STATES 00000 EDU010188D   39967624\n3 UNITED STATES 00000 EDU010189D   40317775\n4 UNITED STATES 00000 EDU010190D   40737600\n5 UNITED STATES 00000 EDU010191D   41385442\n6 UNITED STATES 00000 EDU010192D   42088151\n\n\n\n\nStep 3: Add Year and Survey Code Columns\nNext, we want to pull out the year from the item_id and convert it to an appropriate, 4-digit form placed in it’s own column. We also want to isolate and put in it’s own column the portion of the item_id that corresponds to the survey code and value associated with it. We can use the mutate function to add these columns. The substr() function allows you to extract a string based on position. For the year, for example, the numbers corresponding to the year are in the 8th and 9th position of the 10 character string. Then we add 1900 to the extracted 2 digit number to obtain the 4 digit year. The survey code is extracted in a similar manner.\n\ncensus_1a_add &lt;- census_1a_condensed |&gt;\n  mutate(year = (as.numeric(substr(item_id, 8, 9)) + 1900),\n         survey_code = substr(item_id, 1, 7))\ncensus_1a_add\n\n# A tibble: 31,970 × 6\n   area_name     STCOU item_id    enrollment  year survey_code\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      \n 1 UNITED STATES 00000 EDU010187D   40024299  1987 EDU0101    \n 2 UNITED STATES 00000 EDU010188D   39967624  1988 EDU0101    \n 3 UNITED STATES 00000 EDU010189D   40317775  1989 EDU0101    \n 4 UNITED STATES 00000 EDU010190D   40737600  1990 EDU0101    \n 5 UNITED STATES 00000 EDU010191D   41385442  1991 EDU0101    \n 6 UNITED STATES 00000 EDU010192D   42088151  1992 EDU0101    \n 7 UNITED STATES 00000 EDU010193D   42724710  1993 EDU0101    \n 8 UNITED STATES 00000 EDU010194D   43369917  1994 EDU0101    \n 9 UNITED STATES 00000 EDU010195D   43993459  1995 EDU0101    \n10 UNITED STATES 00000 EDU010196D   44715737  1996 EDU0101    \n# ℹ 31,960 more rows\n\n\n\n\nStep 4: Create Two Data Sets\nIn this next step, we separate the observations into two data sets based on the presence or absence of a character string pattern in the area_name variable. Specifically, we use the grepl() function to identify observations within the area_name column that contain the pattern of a comma followed by a space and then two consecutive characters, which is indicative of county level data. First, we use the filter() function to select only those rows that contain the pattern and store these in the county_data tibble. then we use filter() to select only those rows that do NOT contain the pattern, and store those in the noncounty_data tibble. From here, we also assign a “county” or “non-county” class to each new data set.\n\ncounty_data &lt;- census_1a_add |&gt;\n  filter(grepl(pattern = \", \\\\w\\\\w\", area_name))\n\nnoncounty_data &lt;- census_1a_add |&gt;\n  filter(!grepl(pattern = \", \\\\w\\\\w\", area_name))\n\nclass(county_data) &lt;- c(\"county\", class(county_data))\nclass(noncounty_data) &lt;- c(\"state\", class(noncounty_data))\n\nhead(county_data)\n\n# A tibble: 6 × 6\n  area_name   STCOU item_id    enrollment  year survey_code\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      \n1 Autauga, AL 01001 EDU010187D       6829  1987 EDU0101    \n2 Autauga, AL 01001 EDU010188D       6900  1988 EDU0101    \n3 Autauga, AL 01001 EDU010189D       6920  1989 EDU0101    \n4 Autauga, AL 01001 EDU010190D       6847  1990 EDU0101    \n5 Autauga, AL 01001 EDU010191D       7008  1991 EDU0101    \n6 Autauga, AL 01001 EDU010192D       7137  1992 EDU0101    \n\nhead(noncounty_data)\n\n# A tibble: 6 × 6\n  area_name     STCOU item_id    enrollment  year survey_code\n  &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      \n1 UNITED STATES 00000 EDU010187D   40024299  1987 EDU0101    \n2 UNITED STATES 00000 EDU010188D   39967624  1988 EDU0101    \n3 UNITED STATES 00000 EDU010189D   40317775  1989 EDU0101    \n4 UNITED STATES 00000 EDU010190D   40737600  1990 EDU0101    \n5 UNITED STATES 00000 EDU010191D   41385442  1991 EDU0101    \n6 UNITED STATES 00000 EDU010192D   42088151  1992 EDU0101    \n\n\n\n\nStep 5: Add New Variable for County Data\nWithin the county data set, we now return to using substr() to extract the last two characters of the area_name variable, which indicates the two-letter abbreviation for which state in which the county is located. We store this in a new “state” variable.\n\ncounty_data &lt;- county_data |&gt;\n  mutate(state = substr(area_name, nchar(area_name)-1,\n                        nchar(area_name)))\ncounty_data\n\n# A tibble: 31,450 × 7\n   area_name   STCOU item_id    enrollment  year survey_code state\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001 EDU010187D       6829  1987 EDU0101     AL   \n 2 Autauga, AL 01001 EDU010188D       6900  1988 EDU0101     AL   \n 3 Autauga, AL 01001 EDU010189D       6920  1989 EDU0101     AL   \n 4 Autauga, AL 01001 EDU010190D       6847  1990 EDU0101     AL   \n 5 Autauga, AL 01001 EDU010191D       7008  1991 EDU0101     AL   \n 6 Autauga, AL 01001 EDU010192D       7137  1992 EDU0101     AL   \n 7 Autauga, AL 01001 EDU010193D       7152  1993 EDU0101     AL   \n 8 Autauga, AL 01001 EDU010194D       7381  1994 EDU0101     AL   \n 9 Autauga, AL 01001 EDU010195D       7568  1995 EDU0101     AL   \n10 Autauga, AL 01001 EDU010196D       7834  1996 EDU0101     AL   \n# ℹ 31,440 more rows\n\n\n\n\nStep 6: Add New Variable for Non-County Data\nFor the non-county data set, we use a series of “ifelse” statements to indicate the set of states belonging to each U.S. division, creating a new “division” variable to store this information. When the area in question is not a state (e.g., UNITED STATES), this will return “ERROR”.\n\nnoncounty_data &lt;- noncounty_data |&gt;\n  mutate(division = ifelse(area_name %in% c(\n    \"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \n    \"RHODE ISLAND\", \"VERMONT\"), \"New England\",\n    ifelse(area_name %in% c(\n      \"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\"), \n      \"Middle Atlantic\", \n      ifelse(area_name %in% c(\n        \"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\"),\n        \"East North Central\", \n        ifelse(area_name %in% c(\n          \"IOWA\", \"KANSAS\", \"MINNESOTA\", \"MISSOURI\", \"NEBRASKA\",\n          \"NORTH DAKOTA\", \"SOUTH DAKOTA\"), \"West North Central\",\n          ifelse(area_name %in% c(\n            \"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\", \n            \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\",\n            \"DISTRICT OF COLUMBIA\", \"WEST VIRGINIA\"), \n            \"South Atlantic\",\n            ifelse(area_name %in% c(\n              \"ALABAMA\", \"KENTUCKY\", \"MISSISSIPPI\", \"TENNESSEE\"),\n              \"East South Central\",\n              ifelse(area_name %in% c(\n                \"ARKANSAS\", \"LOUISIANA\", \"OKLAHOMA\", \"TEXAS\"),\n                \"West South Central\",\n                ifelse(area_name %in% c(\n                  \"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANA\",\n                  \"NEVADA\", \"NEW MEXICO\", \"UTAH\", \"WYOMING\"),\n                  \"Mountain\",\n                  ifelse(area_name %in% c(\n                    \"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\",\n                    \"WASHINGTON\"), \"Pacific\", \n                  \"ERROR\"))))))))))\nnoncounty_data\n\n# A tibble: 520 × 7\n   area_name     STCOU item_id    enrollment  year survey_code division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000 EDU010187D   40024299  1987 EDU0101     ERROR   \n 2 UNITED STATES 00000 EDU010188D   39967624  1988 EDU0101     ERROR   \n 3 UNITED STATES 00000 EDU010189D   40317775  1989 EDU0101     ERROR   \n 4 UNITED STATES 00000 EDU010190D   40737600  1990 EDU0101     ERROR   \n 5 UNITED STATES 00000 EDU010191D   41385442  1991 EDU0101     ERROR   \n 6 UNITED STATES 00000 EDU010192D   42088151  1992 EDU0101     ERROR   \n 7 UNITED STATES 00000 EDU010193D   42724710  1993 EDU0101     ERROR   \n 8 UNITED STATES 00000 EDU010194D   43369917  1994 EDU0101     ERROR   \n 9 UNITED STATES 00000 EDU010195D   43993459  1995 EDU0101     ERROR   \n10 UNITED STATES 00000 EDU010196D   44715737  1996 EDU0101     ERROR   \n# ℹ 510 more rows\n\n\n\n\n\nData processing function creation\nWe now turn to a second data set EDU01b, which contains data structured similarly to EDU01a, with measurements from areas of the country taken across different years. In the steps below, we will recreate the steps above for this new data, but rather than simply copying code and modifying to apply to this one new data set, we will create functions that can apply the same set of steps to any similar data set.\n\nImport the data\nTo begin, we import the new data set we will be working with. Although this step will ultimately be incorporated into our final wrapper function, importing at this point allows us to build and test each component of our functions.\n\ncensus_1b_original &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010197N1, EDU010197N2, EDU010198N1, EDU010198...\ndbl (20): EDU010197F, EDU010197D, EDU010198F, EDU010198D, EDU010199F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(census_1b_original)\n\n# A tibble: 6 × 42\n  Area_name     STCOU EDU010197F EDU010197D EDU010197N1 EDU010197N2 EDU010198F\n  &lt;chr&gt;         &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;            &lt;dbl&gt;\n1 UNITED STATES 00000          0   44534459 0000        0000                 0\n2 ALABAMA       01000          0     737386 0000        0000                 0\n3 Autauga, AL   01001          0       8099 0000        0000                 0\n4 Baldwin, AL   01003          0      21410 0000        0000                 0\n5 Barbour, AL   01005          0       5100 0000        0000                 0\n6 Bibb, AL      01007          0       3717 0000        0000                 0\n# ℹ 35 more variables: EDU010198D &lt;dbl&gt;, EDU010198N1 &lt;chr&gt;, EDU010198N2 &lt;chr&gt;,\n#   EDU010199F &lt;dbl&gt;, EDU010199D &lt;dbl&gt;, EDU010199N1 &lt;chr&gt;, EDU010199N2 &lt;chr&gt;,\n#   EDU010200F &lt;dbl&gt;, EDU010200D &lt;dbl&gt;, EDU010200N1 &lt;chr&gt;, EDU010200N2 &lt;chr&gt;,\n#   EDU010201F &lt;dbl&gt;, EDU010201D &lt;dbl&gt;, EDU010201N1 &lt;chr&gt;, EDU010201N2 &lt;chr&gt;,\n#   EDU010202F &lt;dbl&gt;, EDU010202D &lt;dbl&gt;, EDU010202N1 &lt;chr&gt;, EDU010202N2 &lt;chr&gt;,\n#   EDU015203F &lt;dbl&gt;, EDU015203D &lt;dbl&gt;, EDU015203N1 &lt;chr&gt;, EDU015203N2 &lt;chr&gt;,\n#   EDU015204F &lt;dbl&gt;, EDU015204D &lt;dbl&gt;, EDU015204N1 &lt;chr&gt;, EDU015204N2 &lt;chr&gt;, …\n\n\n\n\nFunction to Select Columns and Pivot to Long Form\nCreating the first part of the function is fairly simple and includes the steps of selecting our columns, renaming and pivoting. Our arguments for the function are our tibble we imported and a default variable name which can be changed as appropriate for the data set. Testing the function produces a similar result as obtained with the first data set.\n\nselect_pivot &lt;- function(census_df, default_var_name = \"enrollment\") {\n  census_df |&gt;\n    select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n    rename(area_name = Area_name) |&gt;\n    pivot_longer(cols = 3:12, \n                 names_to = \"item_id\", \n                 values_to = default_var_name)\n}  \n#test function\n#result_step_1_2 &lt;- select_pivot(census_1b_original)\n#result_step_1_2\n\n\n\nFunction to Add Year and Survey Code Columns\nThe next part of the function incorporates the addition of our two extra columns. In this case, we also take in our tibble, but don’t need to specify the default variable since it was specified in the previous function. Testing the function returned the expected tibble.\n\nadd_year_survey_code &lt;- function(census_df) {\n  census_df |&gt; \n    mutate(year = ifelse(substr(item_id, 7, 7)==\"1\", \n     (as.numeric(substr(item_id, 8, 9)) + 1900), \n     ifelse(substr(item_id, 7, 7)==\"2\", \n       (as.numeric(substr(item_id, 8, 9)) + 2000), 0)), \n      survey_code = substr(item_id, 1, 7))\n}\n\n#test the function\n#result_step_3 &lt;- add_year_survey_code(result_step_1_2)\n#result_step_3\n\n\n\nFunction to Add State Variable\nFor the next steps, we will change up the order a bit. Instead of proceeding directly to step 4, which involves splitting the data into two separate data sets, we will first create functions to add variables as done in steps 5 and 6. This will allow us to then call these functions as a part of step 4, thus accomplishing all 3 steps with one higher-order function.\nFor step 5, the function below takes the output from the previous step and extracts the last two characters of the area_name variable to create the new “state” variable. The only argument is the name of the census data tibble output from the previous step.\n\nadd_state &lt;- function(census_df) {\n  census_df |&gt;\n    mutate(state = substr(area_name, nchar(area_name)-1,\n                        nchar(area_name)))\n}\n#test function\n#result_step_5 &lt;- add_state(result_step_3)\n#head(result_step_5)\n\n\n\nFunction to Add Division Variable\nFor step 6, we create a function to assign each state to its corresponding division in the United States. Given that the data set has not yet been split between county and non-county data, this function will return “ERROR” for the majority of observations which correspond to county-level data if tested independently. However, in practice, it will be called after the split has been performed in step 4.\n\nadd_division &lt;- function(census_df) {\n  census_df |&gt;\n    mutate(division = ifelse(area_name %in% c(\n      \"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \n      \"RHODE ISLAND\", \"VERMONT\"), \"New England\",\n      ifelse(area_name %in% c(\n        \"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\"),\n        \"Middle Atlantic\",\n        ifelse(area_name %in% c(\n          \"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\"),\n          \"East North Central\",\n          ifelse(area_name %in% c(\n            \"IOWA\", \"KANSAS\", \"MINNESOTA\", \"MISSOURI\", \"NEBRASKA\",\n            \"NORTH DAKOTA\", \"SOUTH DAKOTA\"), \"West North Central\",\n            ifelse(area_name %in% c(\n              \"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\", \n              \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\", \n              \"DISTRICT OF COLUMBIA\", \"WEST VIRGINIA\"), \n              \"South Atlantic\", \n              ifelse(area_name %in% c(\n                \"ALABAMA\", \"KENTUCKY\", \"MISSISSIPPI\",\n                \"TENNESSEE\"), \"East South Central\", \n                ifelse(area_name %in% c(\n                  \"ARKANSAS\", \"LOUISIANA\", \"OKLAHOMA\", \"TEXAS\"),\n                  \"West South Central\",\n                  ifelse(area_name %in% c(\n                    \"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANA\",\n                    \"NEVADA\", \"NEW MEXICO\", \"UTAH\", \"WYOMING\"),\n                    \"Mountain\", \n                    ifelse(area_name %in% c(\n                      \"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\", \n                      \"WASHINGTON\"), \"Pacific\", \"ERROR\"))))))))))\n}\n#test function\n#result_step_6 &lt;- add_division(result_step_5)\n#head(result_step_6)\n\n\n\nFunction to Split the Data Set into County and Non-County Data\nHere, we create a higher-order function that will split the data into two data sets (one for county-level data, and one for non-county data), add the county or non-county class to each data set, and then call the above two functions to add the new variables.\n\nsplit_data &lt;- function(census_df) {\n  county_data &lt;- census_df |&gt;\n    filter(grepl(pattern = \", \\\\w\\\\w\", area_name))\n  class(county_data) &lt;- c(\"county\", class(county_data)) \n  county_data &lt;- add_state(county_data)\n  \n  noncounty_data &lt;- census_df |&gt;\n    filter(!grepl(pattern = \", \\\\w\\\\w\", area_name)) \n  class(noncounty_data) &lt;- c(\"state\", class(noncounty_data)) \n  noncounty_data &lt;- add_division(noncounty_data)\n  list(\"county_data\" = county_data, \n              \"noncounty_data\" = noncounty_data)\n}\n#test function\n#census_df_list &lt;- split_data(result_step_3)\n\n\n\nFinal Data Processing Wrapper Function\nFor our final step of data processing, we now create a “wrapper function” that will apply the above functions to accomplish all of these steps at once. The wrapper function will begin by reading in the data, and thus takes in an initial argument defining the url to access the data. The second argument defines the name of the variable that will store the measurement for each observation once the pivot to long form is complete. As above, this argument is set to a default of “enrollment”, such that only the url is absolutely required.\n\ndata_processing_wrapper &lt;- function(url, default_var_name = \"enrollment\") {\n  result &lt;- read_csv(url)\n    result &lt;- select_pivot(result, default_var_name = default_var_name) |&gt;\n    add_year_survey_code() |&gt;\n    split_data() \n  return(result)\n}\n\n\n\nCalling the Functions\nNow, we call our function twice, once for data set censusEDU01a and again for EDU01a and again for EDU01b, which will create two lists, each containing two tibbles (one for county and one for non-county data).\n\ncensus_df_list_EDU01a &lt;- \n  data_processing_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncensus_df_list_EDU01b &lt;- \n  data_processing_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010197N1, EDU010197N2, EDU010198N1, EDU010198...\ndbl (20): EDU010197F, EDU010197D, EDU010198F, EDU010198D, EDU010199F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncensus_df_list_EDU01a\n\n$county_data\n# A tibble: 31,450 × 7\n   area_name   STCOU item_id    enrollment  year survey_code state\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001 EDU010187D       6829  1987 EDU0101     AL   \n 2 Autauga, AL 01001 EDU010188D       6900  1988 EDU0101     AL   \n 3 Autauga, AL 01001 EDU010189D       6920  1989 EDU0101     AL   \n 4 Autauga, AL 01001 EDU010190D       6847  1990 EDU0101     AL   \n 5 Autauga, AL 01001 EDU010191D       7008  1991 EDU0101     AL   \n 6 Autauga, AL 01001 EDU010192D       7137  1992 EDU0101     AL   \n 7 Autauga, AL 01001 EDU010193D       7152  1993 EDU0101     AL   \n 8 Autauga, AL 01001 EDU010194D       7381  1994 EDU0101     AL   \n 9 Autauga, AL 01001 EDU010195D       7568  1995 EDU0101     AL   \n10 Autauga, AL 01001 EDU010196D       7834  1996 EDU0101     AL   \n# ℹ 31,440 more rows\n\n$noncounty_data\n# A tibble: 530 × 7\n   area_name     STCOU item_id    enrollment  year survey_code division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000 EDU010187D   40024299  1987 EDU0101     ERROR   \n 2 UNITED STATES 00000 EDU010188D   39967624  1988 EDU0101     ERROR   \n 3 UNITED STATES 00000 EDU010189D   40317775  1989 EDU0101     ERROR   \n 4 UNITED STATES 00000 EDU010190D   40737600  1990 EDU0101     ERROR   \n 5 UNITED STATES 00000 EDU010191D   41385442  1991 EDU0101     ERROR   \n 6 UNITED STATES 00000 EDU010192D   42088151  1992 EDU0101     ERROR   \n 7 UNITED STATES 00000 EDU010193D   42724710  1993 EDU0101     ERROR   \n 8 UNITED STATES 00000 EDU010194D   43369917  1994 EDU0101     ERROR   \n 9 UNITED STATES 00000 EDU010195D   43993459  1995 EDU0101     ERROR   \n10 UNITED STATES 00000 EDU010196D   44715737  1996 EDU0101     ERROR   \n# ℹ 520 more rows\n\ncensus_df_list_EDU01b\n\n$county_data\n# A tibble: 31,450 × 7\n   area_name   STCOU item_id    enrollment  year survey_code state\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001 EDU010197D       8099  1997 EDU0101     AL   \n 2 Autauga, AL 01001 EDU010198D       8211  1998 EDU0101     AL   \n 3 Autauga, AL 01001 EDU010199D       8489  1999 EDU0101     AL   \n 4 Autauga, AL 01001 EDU010200D       8912  2000 EDU0102     AL   \n 5 Autauga, AL 01001 EDU010201D       8626  2001 EDU0102     AL   \n 6 Autauga, AL 01001 EDU010202D       8762  2002 EDU0102     AL   \n 7 Autauga, AL 01001 EDU015203D       9105  2003 EDU0152     AL   \n 8 Autauga, AL 01001 EDU015204D       9200  2004 EDU0152     AL   \n 9 Autauga, AL 01001 EDU015205D       9559  2005 EDU0152     AL   \n10 Autauga, AL 01001 EDU015206D       9652  2006 EDU0152     AL   \n# ℹ 31,440 more rows\n\n$noncounty_data\n# A tibble: 530 × 7\n   area_name     STCOU item_id    enrollment  year survey_code division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000 EDU010197D   44534459  1997 EDU0101     ERROR   \n 2 UNITED STATES 00000 EDU010198D   46245814  1998 EDU0101     ERROR   \n 3 UNITED STATES 00000 EDU010199D   46368903  1999 EDU0101     ERROR   \n 4 UNITED STATES 00000 EDU010200D   46818690  2000 EDU0102     ERROR   \n 5 UNITED STATES 00000 EDU010201D   47127066  2001 EDU0102     ERROR   \n 6 UNITED STATES 00000 EDU010202D   47606570  2002 EDU0102     ERROR   \n 7 UNITED STATES 00000 EDU015203D   48506317  2003 EDU0152     ERROR   \n 8 UNITED STATES 00000 EDU015204D   48693287  2004 EDU0152     ERROR   \n 9 UNITED STATES 00000 EDU015205D   48978555  2005 EDU0152     ERROR   \n10 UNITED STATES 00000 EDU015206D   49140702  2006 EDU0152     ERROR   \n# ℹ 520 more rows\n\n\n\n\nCombining the Data\nIn this final step for preparing the data, we create a function that takes in the results of two calls of the wrapper function and combines them. Specifically, we use the bind_rows function to append the rows of two like tibbles together, resulting in two new comprehensive tibbles (one for county and one for noncounty data). These are output into a single list object.\n\ncombine_census_lists &lt;- function(list1, list2) {\n  county_bind_result &lt;- bind_rows(list1$county_data, list2$county_data) \n  noncounty_bind_result &lt;- bind_rows(list1$noncounty_data, list2$noncounty_data) \n  return(list(\"county_data\" = county_bind_result,\n              \"noncounty_data\" = noncounty_bind_result))\n}\n\ncombined_census_lists_EDU &lt;- combine_census_lists(census_df_list_EDU01a, census_df_list_EDU01b)\ncombined_census_lists_EDU\n\n$county_data\n# A tibble: 62,900 × 7\n   area_name   STCOU item_id    enrollment  year survey_code state\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001 EDU010187D       6829  1987 EDU0101     AL   \n 2 Autauga, AL 01001 EDU010188D       6900  1988 EDU0101     AL   \n 3 Autauga, AL 01001 EDU010189D       6920  1989 EDU0101     AL   \n 4 Autauga, AL 01001 EDU010190D       6847  1990 EDU0101     AL   \n 5 Autauga, AL 01001 EDU010191D       7008  1991 EDU0101     AL   \n 6 Autauga, AL 01001 EDU010192D       7137  1992 EDU0101     AL   \n 7 Autauga, AL 01001 EDU010193D       7152  1993 EDU0101     AL   \n 8 Autauga, AL 01001 EDU010194D       7381  1994 EDU0101     AL   \n 9 Autauga, AL 01001 EDU010195D       7568  1995 EDU0101     AL   \n10 Autauga, AL 01001 EDU010196D       7834  1996 EDU0101     AL   \n# ℹ 62,890 more rows\n\n$noncounty_data\n# A tibble: 1,060 × 7\n   area_name     STCOU item_id    enrollment  year survey_code division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000 EDU010187D   40024299  1987 EDU0101     ERROR   \n 2 UNITED STATES 00000 EDU010188D   39967624  1988 EDU0101     ERROR   \n 3 UNITED STATES 00000 EDU010189D   40317775  1989 EDU0101     ERROR   \n 4 UNITED STATES 00000 EDU010190D   40737600  1990 EDU0101     ERROR   \n 5 UNITED STATES 00000 EDU010191D   41385442  1991 EDU0101     ERROR   \n 6 UNITED STATES 00000 EDU010192D   42088151  1992 EDU0101     ERROR   \n 7 UNITED STATES 00000 EDU010193D   42724710  1993 EDU0101     ERROR   \n 8 UNITED STATES 00000 EDU010194D   43369917  1994 EDU0101     ERROR   \n 9 UNITED STATES 00000 EDU010195D   43993459  1995 EDU0101     ERROR   \n10 UNITED STATES 00000 EDU010196D   44715737  1996 EDU0101     ERROR   \n# ℹ 1,050 more rows"
  }
]