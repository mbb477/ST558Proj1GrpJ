---
title: "ST558 Project 1"
author: "M. Sweitzer, M. Beebe"
format: html
editor: visual
---

# Data processing first steps

## Data set EDU01a

### Import the Data

```{r, echo=FALSE}
suppressPackageStartupMessages(library(tidyverse))
```

```{r}
library(tidyverse)
library(readr)
census_1a_original <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
head(census_1a_original)
#view(census_1a_original)
```

### Select and Pivot

```{r}
census_1a_condensed <- census_1a_original |>
  select(Area_name, STCOU, ends_with("D")) |>
  rename(area_name = Area_name) |>
  pivot_longer(cols = 3:12, 
               names_to = "item_id", 
               values_to = "measurement")
head(census_1a_condensed) 
#view(census_1a_condensed)
```

### Add year and survey code columns

```{r}
census_1a_add <- census_1a_condensed |>
  mutate(year = (as.numeric(substr(item_id, 8, 9)) + 1900),
         survey_code = substr(item_id, 1, 7))
census_1a_add
```

### Create two datasets with non-county and county level data, with new class added to each

```{r}
county_data <- census_1a_add |>
  filter(grepl(pattern = ", \\w\\w", area_name))

noncounty_data <- census_1a_add |>
  filter(!grepl(pattern = ", \\w\\w", area_name))

class(county_data) <- c("county", class(county_data))
class(noncounty_data) <- c("state", 
                           class(noncounty_data))
```

### Add new variable for county level tibble indicating which state the county is located in

```{r}


```


### Add new variable for non-county level tibble

# Data processing function creation

## Import data set EDU01b

```{r}
census_1b_original <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
head(census_1b_original)
```

## Function for steps 1 and 2

```{r}
process_data1 <- function(tibble_df, default_var_name = "measurement") {
  tibble_df |>
    select(Area_name, STCOU, ends_with("D")) |>
    rename(area_name = Area_name) |>
    pivot_longer(cols = 3:12, 
                 names_to = "item_id", 
                 values_to = default_var_name)
}
#test function
result_step_1_2 <- process_data1(census_1b_original)
result_step_1_2
```

## Function for step 3

```{r}
process_data2 <- function(tibble_df) {
  tibble_df |>
    mutate(year = (as.numeric(substr(item_id, 8, 9)) + 1900),
           survey_code = substr(item_id, 1, 7))
}
result_step_3 <- process_data2(result_step_1_2)
result_step_3
```
