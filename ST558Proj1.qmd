---
title: "ST558 Project 1"
author: "M. Sweitzer, M. Beebe"
date: "`r Sys.Date()`"
format: html
editor: visual
---

# Data processing

One of the goals of this project is to create a function that can take in a URL and process and parse similar types of data sets in a specific way. The data sets we are working with are files that contain Census Bureau information.

## First Steps

### Import the Data

We will start with the EDU01a data set and use it to outline the steps that will be necessary to create our wrapper function. To begin, the appropriate packages are loaded and the data imported using read_csv. This function is appropriate for csv files. The data already contains column names, which is the default for this function, so it is not necessary to specify an argument regarding column names.

```{r, echo=FALSE}
suppressPackageStartupMessages(library(tidyverse))
```

```{r}
library(tidyverse)
library(readr)
census_1a_original <- 
read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
head(census_1a_original)
```

### Steps 1 and 2: Select Columns and Pivot to Long Form, Remove Duplicate District of Columbia

The next step is to select the columns we are interested in, followed by pivoting the data into a long format, which is more appropriate for data analysis. In this case, we are selecting Area_name, which is also being renamed to area_name, STCOU, which is a state (first 2 digits) and county (last 3 digits) code and all columns that end with a "D". These columns ending in "D" correspond to an id that identifies the type of survey and value associated with it and the 2 digit year. We also used filter() to remove duplicate District of Columbia data.

```{r}
census_1a_condensed <- census_1a_original |>
  select(Area_name, STCOU, ends_with("D")) |>
  rename(area_name = Area_name) |>
  pivot_longer(cols = 3:12, 
               names_to = "item_id", 
               values_to = "enrollment") |> 
  filter(area_name != "District of Columbia")
head(census_1a_condensed) 
#view(census_1a_condensed)
```

### Step 3: Add Year and Survey Code Columns

Next, we want to pull out the year from the item_id and convert it to an appropriate, 4-digit form placed in its own column. We also want to isolate and put in it's own column the portion of the item_id that corresponds to the survey code and value associated with it. We can use the mutate function to add these columns. The substr() function allows you to extract a string based on position. For the year, for example, the numbers corresponding to the year are in the 8th and 9th position of the 10 character string. Then we add 1900 to the extracted 2 digit number to obtain the 4 digit year. The survey code is extracted in a similar manner.

```{r}
census_1a_add <- census_1a_condensed |>
  mutate(year = (as.numeric(substr(item_id, 8, 9)) + 1900),
         survey_code = substr(item_id, 1, 7))
head(census_1a_add)
```

### Step 4: Create County and State Data Sets from Census Data Set

In this next step, we separate the observations into two data sets based on the presence or absence of a character string pattern in the area_name variable. Specifically, we use the grepl() function to identify observations within the area_name column that contain the pattern of a comma followed by a space and then two consecutive characters, which is indicative of county level data. First, we use the filter() function to select only those rows that contain the pattern and store these in the county_data tibble. then we use filter() to select only those rows that do NOT contain the pattern, and store those in the noncounty_data tibble. From here, we also assign a "county" or "state" class to each new data set.

```{r}
county_data <- census_1a_add |>
  filter(grepl(pattern = ", \\w\\w", area_name))

noncounty_data <- census_1a_add |>
  filter(!grepl(pattern = ", \\w\\w", area_name))

class(county_data) <- c("county", class(county_data))
class(noncounty_data) <- c("state", class(noncounty_data))

head(county_data)
head(noncounty_data)
```

### Step 5: Add New Variable for County Data

Within the county data set, we now return to using substr() to extract the last two characters of the area_name variable, which indicates the two-letter abbreviation for which state in which the county is located. We store this in a new "state" variable.

```{r}
county_data <- county_data |>
  mutate(state = substr(area_name, nchar(area_name)-1,
                        nchar(area_name)))
head(county_data)
```

### Step 6: Add New Variable for Non-County Data

For the non-county data set, we use a series of "ifelse" statements to indicate the set of states belonging to each U.S. division, creating a new "division" variable to store this information. When the area in question is not a state (e.g., UNITED STATES), this will return "ERROR".

```{r}
noncounty_data <- noncounty_data |>
  mutate(division = ifelse(area_name %in% c(
    "CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", 
    "RHODE ISLAND", "VERMONT"), "New England",
    ifelse(area_name %in% c(
      "NEW JERSEY", "NEW YORK", "PENNSYLVANIA"), 
      "Middle Atlantic", 
      ifelse(area_name %in% c(
        "ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN"),
        "East North Central", 
        ifelse(area_name %in% c(
          "IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA",
          "NORTH DAKOTA", "SOUTH DAKOTA"), "West North Central",
          ifelse(area_name %in% c(
            "DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", 
            "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA",
            "DISTRICT OF COLUMBIA", "WEST VIRGINIA"), 
            "South Atlantic",
            ifelse(area_name %in% c(
              "ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE"),
              "East South Central",
              ifelse(area_name %in% c(
                "ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS"),
                "West South Central",
                ifelse(area_name %in% c(
                  "ARIZONA", "COLORADO", "IDAHO", "MONTANA",
                  "NEVADA", "NEW MEXICO", "UTAH", "WYOMING"),
                  "Mountain",
                  ifelse(area_name %in% c(
                    "ALASKA", "CALIFORNIA", "HAWAII", "OREGON",
                    "WASHINGTON"), "Pacific", 
                  "ERROR"))))))))))
head(noncounty_data)
```

## Data processing function creation

We now turn to a second data set EDU01b, which contains data structured similarly to EDU01a, with measurements from areas of the country taken across different years. In the steps below, we will recreate the steps above for this new data, but rather than simply copying code and modifying to apply to this one new data set, we will create functions that can apply the same set of steps to any similar data set.

### Import the data

To begin, we import the new data set we will be working with. Although this step will ultimately be incorporated into our final wrapper function, importing at this point allows us to build and test each component of our functions.

```{r}
census_1b_original <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
head(census_1b_original)
```

### Function to Select Columns and Pivot to Long Form

Creating the first part of the function is fairly simple and includes the steps of selecting our columns, renaming and pivoting. Our arguments for the function are our tibble we imported and a default variable name which can be changed as appropriate for the data set. Testing the function produces a similar result as obtained with the first data set.

```{r}
select_pivot <- function(census_df, default_var_name = "enrollment") {
  census_df |>
    select(Area_name, STCOU, ends_with("D")) |>
    rename(area_name = Area_name) |>
    pivot_longer(cols = 3:12, 
                 names_to = "item_id", 
                 values_to = default_var_name) |>
    filter(area_name != "District of Columbia")
}  
#test function
#result_step_1_2 <- select_pivot(census_1b_original)
#result_step_1_2
```

### Function to Add Year and Survey Code Columns

The next part of the function incorporates the addition of our two extra columns. In this case, we also take in our tibble, but don't need to specify the default variable since it was specified in the previous function. Testing the function returned the expected tibble.

```{r}
add_year_survey_code <- function(census_df) {
  census_df |> 
    mutate(year = ifelse(substr(item_id, 7, 7)=="1", 
     (as.numeric(substr(item_id, 8, 9)) + 1900), 
     ifelse(substr(item_id, 7, 7)=="2", 
       (as.numeric(substr(item_id, 8, 9)) + 2000), 0)), 
      survey_code = substr(item_id, 1, 7))
}

#test the function
#result_step_3 <- add_year_survey_code(result_step_1_2)
#result_step_3
```

### Function to Add State Variable

For the next steps, we will change up the order a bit. Instead of proceeding directly to step 4, which involves splitting the data into two separate data sets, we will first create functions to add variables as done in steps 5 and 6. This will allow us to then call these functions as a part of step 4, thus accomplishing all 3 steps with one higher-order function.

For step 5, the function below takes the output from the previous step and extracts the last two characters of the area_name variable to create the new "state" variable. The only argument is the name of the census data tibble output from the previous step.

```{r}
add_state <- function(census_df) {
  census_df |>
    mutate(state = substr(area_name, nchar(area_name)-1,
                        nchar(area_name)))
}
#test function
#result_step_5 <- add_state(result_step_3)
#head(result_step_5)
```

### Function to Add Division Variable

For step 6, we create a function to assign each state to its corresponding division in the United States. Given that the data set has not yet been split between county and non-county data, this function will return "ERROR" for the majority of observations which correspond to county-level data if tested independently. However, in practice, it will be called after the split has been performed in step 4.

```{r}
add_division <- function(census_df) {
  census_df |>
    mutate(division = ifelse(area_name %in% c(
      "CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", 
      "RHODE ISLAND", "VERMONT"), "New England",
      ifelse(area_name %in% c(
        "NEW JERSEY", "NEW YORK", "PENNSYLVANIA"),
        "Middle Atlantic",
        ifelse(area_name %in% c(
          "ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN"),
          "East North Central",
          ifelse(area_name %in% c(
            "IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA",
            "NORTH DAKOTA", "SOUTH DAKOTA"), "West North Central",
            ifelse(area_name %in% c(
              "DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", 
              "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", 
              "DISTRICT OF COLUMBIA", "WEST VIRGINIA"), 
              "South Atlantic", 
              ifelse(area_name %in% c(
                "ALABAMA", "KENTUCKY", "MISSISSIPPI",
                "TENNESSEE"), "East South Central", 
                ifelse(area_name %in% c(
                  "ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS"),
                  "West South Central",
                  ifelse(area_name %in% c(
                    "ARIZONA", "COLORADO", "IDAHO", "MONTANA",
                    "NEVADA", "NEW MEXICO", "UTAH", "WYOMING"),
                    "Mountain", 
                    ifelse(area_name %in% c(
                      "ALASKA", "CALIFORNIA", "HAWAII", "OREGON", 
                      "WASHINGTON"), "Pacific", "ERROR"))))))))))
}
#test function
#result_step_6 <- add_division(result_step_5)
#head(result_step_6)
```

### Function to Split the Data Set into County and Non-County Data

Here, we create a higher-order function that will split the data into two data sets (one for county-level data, and one for non-county data), add the county or state class to each data set, and then call the above two functions to add the new variables.

```{r}
split_data <- function(census_df) {
  county_data <- census_df |>
    filter(grepl(pattern = ", \\w\\w", area_name))
  class(county_data) <- c("county", class(county_data)) 
  county_data <- add_state(county_data)
  
  noncounty_data <- census_df |>
    filter(!grepl(pattern = ", \\w\\w", area_name)) 
  class(noncounty_data) <- c("state", class(noncounty_data)) 
  noncounty_data <- add_division(noncounty_data)
  list("county_data" = county_data, 
              "noncounty_data" = noncounty_data)
}
#test function
#census_df_list <- split_data(result_step_3)
```

### Final Data Processing Wrapper Function

For our final step of data processing, we now create a "wrapper function" that will apply the above functions to accomplish all of these steps at once. The wrapper function will begin by reading in the data, and thus takes in an initial argument defining the url to access the data. The second argument defines the name of the variable that will store the measurement for each observation once the pivot to long form is complete. As above, this argument is set to a default of "enrollment", such that only the url is absolutely required. The result is a list with two tibbles, one for county and one for non-county (state).

```{r}
data_processing_wrapper <- function(url, default_var_name = "enrollment") {
  result <- read_csv(url)
    result <- select_pivot(result, default_var_name = default_var_name) |>
    add_year_survey_code() |>
    split_data() 
  return(result)
}
```

### Calling the Functions

Now, we call our function twice, once for data set EDU01a and again for EDU01b, which will create two lists, each containing two tibbles (one for county and one for non-county data).

```{r}

census_df_list_EDU01a <- 
  data_processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")

census_df_list_EDU01b <- 
  data_processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")

census_df_list_EDU01a
census_df_list_EDU01b
```

## Data Combining Function

In this final step for preparing the data, we create a function that takes in the results of two calls of the wrapper function and combines them. Specifically, we use the bind_rows function to append the rows of two like tibbles together, resulting in two new comprehensive tibbles (one for county and one for state data). These are output into a single list object.

```{r}
combine_census_lists <- function(list1, list2) {
  county_bind_result <- bind_rows(list1$county_data, list2$county_data) 
  noncounty_bind_result <- bind_rows(list1$noncounty_data, list2$noncounty_data) 
  return(list("county_data" = county_bind_result,
              "noncounty_data" = noncounty_bind_result))
}

combined_census_lists_EDU <- combine_census_lists(census_df_list_EDU01a, census_df_list_EDU01b)
combined_census_lists_EDU

```

# Generic Summarizing Functions

The goal of this section is to create two functions that will take in combined data sets (as a list) from our data combining function and create plots for county and non-county (state) data. Details of these functions are provided in subsequent sections.

## State Plotting Function

For the state plotting function, we want to create a function that will take in our combined census data sets and our default variable as arguments and returns a plot of year versus the mean of the default variable for each division. To accomplish this, we first need to do some manipulation with our tibble. First, we isolate the proper tibble from the list using \$noncounty_data. Since the United States is not a division and has "ERROR" in the division column, we need to filter to remove those rows. Finally we can group by year and division to so that the appropriate means are calculated. To calculate a mean for each year and division combination, we use summarize and reference our default variable name for the mean function.

After putting our data in the proper form and obtaining means, we can create our line plot. We use ggplot to create a plot instance. The plot instance needs two arguments, one specifying our data and the ohter an aesthetic (aes) mapping argument. The aes mapping defines the x and y axis variables, as well as mapping for division so the plot assigns a different color and line to each division. Next we add layers. Since we want a line connecting years for each division, we use geom_line. We chose to leave the defaults in place so no arguments are specified. A labs layer was then added to modify some labels. The axes and legend labels are capitalized and the title and y-axis label specified in a way that will allow the names to change dynamically according to the default variable name used when calling the function.

```{r}
#| eval: false
state.plot <- function(df, var_name = "enrollment") {
  result <- df$noncounty_data |>
    filter(area_name != "UNITED STATES") |> 
    group_by(division, year) |> 
    summarize(mean_values = mean(get(var_name)), .groups = "drop")
  g <- ggplot(result, aes(x = year, y = mean_values, color = division)) +
    geom_line() +
    labs (x = "Year", y = str_to_title(paste("mean", var_name)), color = "Division", 
          title = str_to_title(paste("mean", var_name, "per year by division")))
  return(g)
}

state.plot(combined_census_lists_EDU)
```

### Investigation of Possible Outlier in Middle Atlantic

There is a decrease in enrollment in 1997 for the Middle Atlantic, so there may be an outlier. The data was filtered for 1997 and Middle Atlantic. We can see that the enrollment for New Jersey is recorded as zero.

```{r}
outlier_mid_atlantic <- combined_census_lists_EDU[[2]] |>
  filter(year == 1997, division == "Middle Atlantic")
outlier_mid_atlantic
  
```

EDU01097 corresponds to public education enrollment for fall 1996-1997. An online search found a document from the New Jersey Department of Education indicating that enrollment for the 1996-1997 school year was 1,227,832, so we will replace the zero with this number and rerun a modified plot function (<https://nces.ed.gov/pubs2000/stateprofiles/pdf/new_jersey.pdf>). In the new plot function presented below, the incorrect value is replaced using ifelse() in a mutate statement.


```{r}
#NEED TO CHANGE THIS TO NOT USE ENROLLMENT IN MUTATE and instead assign
#dynamically
state.plot <- function(df, var_name = "enrollment") {
  result <- df$noncounty_data |>
    filter(area_name != "UNITED STATES") |> 
    mutate(enrollment = ifelse(area_name == "NEW JERSEY" & year == 1997 & enrollment == 0, 1227832, enrollment)) |>
    group_by(division, year) |> 
    summarize(mean_values = mean(get(var_name)), .groups = "drop")
  g <- ggplot(result, aes(x = year, y = mean_values, color = division)) +
    geom_line() +
    labs (x = "Year", y = str_to_title(paste("mean", var_name)), 
          color = "Division", 
          title = str_to_title(paste("mean", var_name, "per year by division")))
  return(g)
}

#state.plot(combined_census_lists_EDU)
```

## County Plotting Function

For county plotting, we will create a function that takes in the data frame, a selected state (default = North Carolina) and a specified variable name (default = "enrollment"). The function will then sort the counties within the state according to the value of the specified variable. Additional arguments indicate whether the user wants to sort from largest to smallest (sort = "top") or smallest to largest (sort = "bottom"), and how many counties from the list should be included in the top or bottom grouping. First, we test the ability for our function to identify these counties and output their names.

```{r}
plot.county <- function(census_df, var_name = "enrollment", 
                        select_state = "NC", sort = "top", x = 5){
result <- census_df$county_data |>
    filter(state == select_state) |>
    group_by(area_name) |>
     summarize(mean_values = mean(get(var_name)))

if(sort %in% c("top")){
    county_names <- result |>
      arrange(desc(mean_values)) |>
      slice_head(n=x)
  } else {
      county_names <- result |>
        arrange(mean_values) |>
        slice_head(n=x)
  }
output <- census_df$county_data |>
  filter(state == select_state, 
         area_name %in% county_names$area_name)

ggplot(output, aes(x = year, y = get(var_name), color = area_name)) +
    geom_line() +
    labs (x = "Year", y = str_to_title(var_name), 
          color = "County", 
          title = str_to_title(paste(var_name, "per year for", sort, x, "counties")))
}

plot.county(combined_census_lists_EDU, sort = "bottom", x=5)

```

# Putting it Together (need a better name, maybe)

## EDU Data Sets

### Data Processing Function Applied to EDU Data Sets

#### EDU1a

```{r}
census_df_list_EDU01a <- 
  data_processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
census_df_list_EDU01a
```

#### EDU1b

```{r}
census_df_list_EDU01b <- 
  data_processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
census_df_list_EDU01b
```

### Data Combining Function Applied to EDU Data Sets

```{r}
combined_census_lists_EDU <- 
  combine_census_lists(census_df_list_EDU01a, census_df_list_EDU01b)
combined_census_lists_EDU
```

### State Plot Function Applied to EDU Data Sets

#### EDU State Plot With Outlier

```{r}
state.plot.outlier <- function(df, var_name = "enrollment") {
  result <- df$noncounty_data |>
    filter(area_name != "UNITED STATES") |> 
    group_by(division, year) |> 
    summarize(mean_values = mean(get(var_name)), .groups = "drop")
  g <- ggplot(result, aes(x = year, y = mean_values, color = division)) +
    geom_line() +
    labs (x = "Year", y = str_to_title(paste("mean", var_name)), color = "Division", 
          title = str_to_title(paste("mean", var_name, "per year by division")))
  return(g)
}

state.plot.outlier(combined_census_lists_EDU)
```

#### EDU State Plot With Outlier Replaced

```{r}
state.plot(combined_census_lists_EDU)
```

### County Plot Function Applied to EDU Data Sets

```{r}

```

## PST Data sets

### Data Processing Function Applied to PST Data Sets

#### PST01a

```{r}
census_df_list_PST01a <- 
  data_processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv", "population")
census_df_list_PST01a
```

#### PST01b

```{r}
census_df_list_PST01b <- 
  data_processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv", "population")
census_df_list_PST01b
```

#### PST01c

```{r}
census_df_list_PST01c <- 
  data_processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv", "population")
census_df_list_PST01c
```

#### PST01d

```{r}
census_df_list_PST01d <- 
  data_processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv", "population")
census_df_list_PST01d
```

### Data Combining Function Applied to PST Data Sets

#### Combining PST01a and PST01b

```{r}
combined_census_lists_PST_1a_1b <- combine_census_lists(census_df_list_PST01a, 
                                                        census_df_list_PST01b)
combined_census_lists_PST_1a_1b

```

#### Combining PST01c to PST1a/1b

```{r}
combined_census_lists_PST_1a_1b_1c <- 
  combine_census_lists(combined_census_lists_PST_1a_1b, census_df_list_PST01c)
combined_census_lists_PST_1a_1b_1c
```

#### Full Combined PST list

```{r}
combined_census_lists_PST <- 
  combine_census_lists(combined_census_lists_PST_1a_1b_1c, census_df_list_PST01d)
combined_census_lists_PST
```


### State Plot Function Applied to PST Data Sets

```{r}
state.plot <- function(df, var_name = "population") {
  result <- df$noncounty_data |>
    filter(area_name != "UNITED STATES") |> 
    group_by(division, year) |> 
    summarize(mean_values = mean(get(var_name)), .groups = "drop")
  g <- ggplot(result, aes(x = year, y = mean_values, color = division)) +
    geom_line() +
    labs (x = "Year", y = str_to_title(paste("mean", var_name)), 
          color = "Division", 
          title = str_to_title(paste("mean", var_name, "per year by division")))
  return(g)
}
state.plot(combined_census_lists_PST)
```


### County Plot Function Applied to PST Data Sets
