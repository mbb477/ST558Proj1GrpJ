---
title: "ST558 Project 1"
author: "M. Sweitzer, M. Beebe"
format: html
editor: visual
---

# Data processing first steps

## Data set EDU01a

### Import the Data

```{r, echo=FALSE}
suppressPackageStartupMessages(library(tidyverse))
```

```{r}
library(tidyverse)
library(readr)
census_1a_original <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
head(census_1a_original)
#view(census_1a_original)
```

### Steps 1 and 2: Select and Pivot

```{r}
census_1a_condensed <- census_1a_original |>
  select(Area_name, STCOU, ends_with("D")) |>
  rename(area_name = Area_name) |>
  pivot_longer(cols = 3:12, 
               names_to = "item_id", 
               values_to = "measurement")
head(census_1a_condensed) 
#view(census_1a_condensed)
```

### Step 3: Add year and survey code columns

```{r}
census_1a_add <- census_1a_condensed |>
  mutate(year = (as.numeric(substr(item_id, 8, 9)) + 1900),
         survey_code = substr(item_id, 1, 7))
census_1a_add
```

### Step 4: Create two datasets with non-county and county level data, with new class added to each

```{r}
county_data <- census_1a_add |>
  filter(grepl(pattern = ", \\w\\w", area_name))

noncounty_data <- census_1a_add |>
  filter(!grepl(pattern = ", \\w\\w", area_name))

class(county_data) <- c("county", class(county_data))
class(noncounty_data) <- c("state", class(noncounty_data))

head(county_data)
head(noncounty_data)
```

### Step 5: Add new variable for county level tibble indicating which state the county is located in
```{r}
county_data <- county_data |>
  mutate(state = substr(area_name, nchar(area_name)-1,
                        nchar(area_name)))
```

### Step 6: Add new variable for non-county level tibble indicating which U.S. division where the state is located
```{r}
noncounty_data <- noncounty_data |>
  mutate(division = ifelse(area_name %in% c(
    "CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", 
    "RHODE ISLAND", "VERMONT"), "New England",
    ifelse(area_name %in% c(
      "NEW JERSEY", "NEW YORK", "PENNSYLVANIA"), 
      "Middle Atlantic", 
      ifelse(area_name %in% c(
        "ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN"),
        "East North Central", 
        ifelse(area_name %in% c(
          "IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA",
          "NORTH DAKOTA", "SOUTH DAKOTA"), "West North Central",
          ifelse(area_name %in% c(
            "DELEWARE", "FLORIDA", "GEORGIA", "MARYLAND", 
            "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA",
            "WASHINGTON DC", "WEST VIRGINIA"), "South Atlantic",
            ifelse(area_name %in% c(
              "ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE"),
              "East South Central",
              ifelse(area_name %in% c(
                "ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS"),
                "West South Central",
                ifelse(area_name %in% c(
                  "ARIZONA", "COLORADO", "IDAHO", "MONTANA",
                  "NEVADA", "NEW MEXICO", "UTAH", "WYOMING"),
                  "Mountain",
                  ifelse(area_name %in% c(
                    "ALASKA", "CALIFORNIA", "HAWAII", "OREGON",
                    "WASHINGTON"), "Pacific", 
                    "ERROR"))))))))))
```


# Data processing function creation

## Data Set EDU01b

### Import the data

```{r}
census_1b_original <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
head(census_1b_original)
```

### Function for steps 1 and 2

```{r}
process_data1 <- function(tibble_df, default_var_name = "measurement") {
  tibble_df |>
    select(Area_name, STCOU, ends_with("D")) |>
    rename(area_name = Area_name) |>
    pivot_longer(cols = 3:12, 
                 names_to = "item_id", 
                 values_to = default_var_name)
}
#test function
result_step_1_2 <- process_data1(census_1b_original)
result_step_1_2
```

### Function for step 3

```{r}
process_data2 <- function(tibble_df) {
  tibble_df |>
    mutate(year = (as.numeric(substr(item_id, 8, 9)) + 1900),
           survey_code = substr(item_id, 1, 7))
}
result_step_3 <- process_data2(result_step_1_2)
result_step_3
```


### Function for step 5

### Function for step 6

### Function for step 4

## Final data processing wrapper function

```{r}
data_processing_wrapper <- function(url, default_var_name = "measurement") {
  result <- read_csv(url) |>
    process_data1() |>
    process_data2()
  return(result)
}
data_processing_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
```

